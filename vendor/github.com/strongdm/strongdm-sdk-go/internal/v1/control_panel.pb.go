// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control_panel.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ControlPanelGetSSHCAPublicKeyRequest represents a request for an
// organization's SSH CA public key.
type ControlPanelGetSSHCAPublicKeyRequest struct {
	// Reserved for future use.
	Meta                 *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ControlPanelGetSSHCAPublicKeyRequest) Reset()         { *m = ControlPanelGetSSHCAPublicKeyRequest{} }
func (m *ControlPanelGetSSHCAPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ControlPanelGetSSHCAPublicKeyRequest) ProtoMessage()    {}
func (*ControlPanelGetSSHCAPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf80c768380a9a5a, []int{0}
}

func (m *ControlPanelGetSSHCAPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest.Unmarshal(m, b)
}
func (m *ControlPanelGetSSHCAPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest.Marshal(b, m, deterministic)
}
func (m *ControlPanelGetSSHCAPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest.Merge(m, src)
}
func (m *ControlPanelGetSSHCAPublicKeyRequest) XXX_Size() int {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest.Size(m)
}
func (m *ControlPanelGetSSHCAPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPanelGetSSHCAPublicKeyRequest proto.InternalMessageInfo

func (m *ControlPanelGetSSHCAPublicKeyRequest) GetMeta() *GetRequestMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

// ControlPanelGetSSHCAPublicKeyResponse represents a request for an
// organization's SSH Certificate Authority public key.
type ControlPanelGetSSHCAPublicKeyResponse struct {
	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The public key of the SSH Certificate Authority, in OpenSSH RSA public
	// key format.
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Rate limit information.
	RateLimit            *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ControlPanelGetSSHCAPublicKeyResponse) Reset()         { *m = ControlPanelGetSSHCAPublicKeyResponse{} }
func (m *ControlPanelGetSSHCAPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*ControlPanelGetSSHCAPublicKeyResponse) ProtoMessage()    {}
func (*ControlPanelGetSSHCAPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf80c768380a9a5a, []int{1}
}

func (m *ControlPanelGetSSHCAPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse.Unmarshal(m, b)
}
func (m *ControlPanelGetSSHCAPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse.Marshal(b, m, deterministic)
}
func (m *ControlPanelGetSSHCAPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse.Merge(m, src)
}
func (m *ControlPanelGetSSHCAPublicKeyResponse) XXX_Size() int {
	return xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse.Size(m)
}
func (m *ControlPanelGetSSHCAPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPanelGetSSHCAPublicKeyResponse proto.InternalMessageInfo

func (m *ControlPanelGetSSHCAPublicKeyResponse) GetMeta() *GetResponseMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ControlPanelGetSSHCAPublicKeyResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ControlPanelGetSSHCAPublicKeyResponse) GetRateLimit() *RateLimitMetadata {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*ControlPanelGetSSHCAPublicKeyRequest)(nil), "v1.ControlPanelGetSSHCAPublicKeyRequest")
	proto.RegisterType((*ControlPanelGetSSHCAPublicKeyResponse)(nil), "v1.ControlPanelGetSSHCAPublicKeyResponse")
}

func init() { proto.RegisterFile("control_panel.proto", fileDescriptor_bf80c768380a9a5a) }

var fileDescriptor_bf80c768380a9a5a = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4a, 0xfb, 0x50,
	0x14, 0xc7, 0x49, 0x7f, 0x3f, 0x2d, 0x3d, 0xea, 0xe0, 0xf5, 0x5f, 0x08, 0x1d, 0x4a, 0x51, 0x68,
	0x1d, 0x12, 0x5a, 0x05, 0xc1, 0x49, 0xdb, 0xa1, 0x82, 0x0a, 0x25, 0x7d, 0x80, 0x72, 0x9b, 0x1e,
	0x62, 0x30, 0xb9, 0xf7, 0x9a, 0x7b, 0x5a, 0xe8, 0xea, 0xe8, 0xea, 0xe8, 0x0b, 0x38, 0x0a, 0x7d,
	0x14, 0x27, 0x77, 0x9f, 0x40, 0x17, 0x71, 0x92, 0x24, 0xad, 0xb4, 0x28, 0xd8, 0x2d, 0xf9, 0x9e,
	0x2f, 0x9f, 0x0f, 0xf7, 0x70, 0x60, 0xc3, 0x93, 0x82, 0x62, 0x19, 0x76, 0x15, 0x17, 0x18, 0xda,
	0x2a, 0x96, 0x24, 0x59, 0x6e, 0x58, 0xb3, 0x8a, 0xbe, 0x94, 0x7e, 0x88, 0x0e, 0x57, 0x81, 0xc3,
	0x85, 0x90, 0xc4, 0x29, 0x90, 0x42, 0x67, 0x0d, 0x6b, 0x4d, 0xaa, 0xd9, 0x5f, 0xd0, 0x0a, 0xbd,
	0xec, 0xbb, 0xec, 0xc2, 0x6e, 0x33, 0x63, 0xb6, 0x13, 0x64, 0x0b, 0xa9, 0xd3, 0x39, 0x6b, 0x9e,
	0xb6, 0x07, 0xbd, 0x30, 0xf0, 0xce, 0x71, 0xe4, 0xe2, 0xcd, 0x00, 0x35, 0xb1, 0x7d, 0xf8, 0x1f,
	0x21, 0x71, 0xd3, 0x28, 0x19, 0x95, 0x95, 0xfa, 0xb6, 0x3d, 0xac, 0xd9, 0x2d, 0xa4, 0xc9, 0xf4,
	0x12, 0x89, 0xf7, 0x39, 0x71, 0x37, 0xed, 0x94, 0x5f, 0x0c, 0xd8, 0xfb, 0x03, 0xaa, 0x95, 0x14,
	0x1a, 0xd9, 0xd1, 0x1c, 0x75, 0xe7, 0x9b, 0x9a, 0x8d, 0xa7, 0xd8, 0x06, 0xbc, 0x7d, 0x8c, 0xf3,
	0x4b, 0x4f, 0xef, 0xe3, 0xbc, 0x91, 0x29, 0x58, 0x15, 0x40, 0xa5, 0xb4, 0xee, 0x35, 0x8e, 0xcc,
	0x5c, 0xc9, 0xa8, 0x14, 0xe6, 0x5a, 0x05, 0x35, 0x75, 0xb1, 0x13, 0x80, 0x98, 0x13, 0x76, 0xc3,
	0x20, 0x0a, 0xc8, 0xfc, 0x97, 0x9a, 0xb6, 0x12, 0x93, 0xcb, 0x09, 0x2f, 0x92, 0xf0, 0x57, 0x4f,
	0x21, 0x9e, 0x8e, 0x8f, 0xe1, 0x33, 0x89, 0x1f, 0x93, 0xb8, 0xfe, 0x60, 0xc0, 0xea, 0xec, 0xdb,
	0xd8, 0x9d, 0x01, 0xeb, 0x3f, 0x1e, 0xc8, 0x2a, 0x89, 0x60, 0x91, 0xc5, 0x5a, 0xd5, 0x05, 0x9a,
	0xd9, 0x3a, 0xca, 0xa5, 0xdb, 0xe7, 0xd7, 0xfb, 0x9c, 0xc5, 0x4c, 0x67, 0x58, 0x73, 0xe6, 0x2e,
	0xc1, 0xd1, 0xfa, 0xca, 0xf1, 0x78, 0xe3, 0x10, 0x8a, 0x9e, 0x8c, 0x6c, 0x4d, 0xb1, 0x14, 0x7e,
	0x3f, 0xb2, 0xb9, 0x0a, 0x12, 0xbc, 0x0a, 0x07, 0x51, 0x2f, 0x10, 0x7e, 0x63, 0x73, 0x56, 0xd4,
	0x9e, 0xa4, 0xbd, 0xe5, 0xf4, 0x14, 0x0e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x41, 0x07,
	0xb5, 0x5e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlPanelClient is the client API for ControlPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlPanelClient interface {
	// GetSSHCAPublicKey retrieves the SSH CA public key.
	GetSSHCAPublicKey(ctx context.Context, in *ControlPanelGetSSHCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetSSHCAPublicKeyResponse, error)
}

type controlPanelClient struct {
	cc *grpc.ClientConn
}

func NewControlPanelClient(cc *grpc.ClientConn) ControlPanelClient {
	return &controlPanelClient{cc}
}

func (c *controlPanelClient) GetSSHCAPublicKey(ctx context.Context, in *ControlPanelGetSSHCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetSSHCAPublicKeyResponse, error) {
	out := new(ControlPanelGetSSHCAPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/v1.ControlPanel/GetSSHCAPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPanelServer is the server API for ControlPanel service.
type ControlPanelServer interface {
	// GetSSHCAPublicKey retrieves the SSH CA public key.
	GetSSHCAPublicKey(context.Context, *ControlPanelGetSSHCAPublicKeyRequest) (*ControlPanelGetSSHCAPublicKeyResponse, error)
}

// UnimplementedControlPanelServer can be embedded to have forward compatible implementations.
type UnimplementedControlPanelServer struct {
}

func (*UnimplementedControlPanelServer) GetSSHCAPublicKey(ctx context.Context, req *ControlPanelGetSSHCAPublicKeyRequest) (*ControlPanelGetSSHCAPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHCAPublicKey not implemented")
}

func RegisterControlPanelServer(s *grpc.Server, srv ControlPanelServer) {
	s.RegisterService(&_ControlPanel_serviceDesc, srv)
}

func _ControlPanel_GetSSHCAPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPanelGetSSHCAPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPanelServer).GetSSHCAPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ControlPanel/GetSSHCAPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPanelServer).GetSSHCAPublicKey(ctx, req.(*ControlPanelGetSSHCAPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlPanel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ControlPanel",
	HandlerType: (*ControlPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHCAPublicKey",
			Handler:    _ControlPanel_GetSSHCAPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_panel.proto",
}
