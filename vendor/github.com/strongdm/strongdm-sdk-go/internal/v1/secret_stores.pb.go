// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: secret_stores.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SecretStoreCreateRequest specifies what kind of SecretStores that should be registered in
// the organizations fleet.
type SecretStoreCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new SecretStore.
	SecretStore *SecretStore `protobuf:"bytes,2,opt,name=secret_store,json=secretStore,proto3" json:"secret_store,omitempty"`
}

func (x *SecretStoreCreateRequest) Reset() {
	*x = SecretStoreCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreCreateRequest) ProtoMessage() {}

func (x *SecretStoreCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreCreateRequest.ProtoReflect.Descriptor instead.
func (*SecretStoreCreateRequest) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{0}
}

func (x *SecretStoreCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreCreateRequest) GetSecretStore() *SecretStore {
	if x != nil {
		return x.SecretStore
	}
	return nil
}

// SecretStoreCreateResponse reports how the SecretStores were created in the system.
type SecretStoreCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created SecretStore.
	SecretStore *SecretStore `protobuf:"bytes,2,opt,name=secret_store,json=secretStore,proto3" json:"secret_store,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *SecretStoreCreateResponse) Reset() {
	*x = SecretStoreCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreCreateResponse) ProtoMessage() {}

func (x *SecretStoreCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreCreateResponse.ProtoReflect.Descriptor instead.
func (*SecretStoreCreateResponse) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{1}
}

func (x *SecretStoreCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreCreateResponse) GetSecretStore() *SecretStore {
	if x != nil {
		return x.SecretStore
	}
	return nil
}

func (x *SecretStoreCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// SecretStoreGetRequest specifies which SecretStore to retrieve.
type SecretStoreGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the SecretStore to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SecretStoreGetRequest) Reset() {
	*x = SecretStoreGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreGetRequest) ProtoMessage() {}

func (x *SecretStoreGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreGetRequest.ProtoReflect.Descriptor instead.
func (*SecretStoreGetRequest) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{2}
}

func (x *SecretStoreGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// SecretStoreGetResponse returns a requested SecretStore.
type SecretStoreGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested SecretStore.
	SecretStore *SecretStore `protobuf:"bytes,2,opt,name=secret_store,json=secretStore,proto3" json:"secret_store,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *SecretStoreGetResponse) Reset() {
	*x = SecretStoreGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreGetResponse) ProtoMessage() {}

func (x *SecretStoreGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreGetResponse.ProtoReflect.Descriptor instead.
func (*SecretStoreGetResponse) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{3}
}

func (x *SecretStoreGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreGetResponse) GetSecretStore() *SecretStore {
	if x != nil {
		return x.SecretStore
	}
	return nil
}

func (x *SecretStoreGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// SecretStoreUpdateRequest identifies a SecretStore by ID and provides fields to update on
// that SecretStore record.
type SecretStoreUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the SecretStore to update. If an ID is already
	// specified in the `secretstore` field, this field is not required. If an ID is
	// specified in both places, they must match.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Parameters to overwrite the specified SecretStore.
	SecretStore *SecretStore `protobuf:"bytes,3,opt,name=secret_store,json=secretStore,proto3" json:"secret_store,omitempty"`
}

func (x *SecretStoreUpdateRequest) Reset() {
	*x = SecretStoreUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreUpdateRequest) ProtoMessage() {}

func (x *SecretStoreUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreUpdateRequest.ProtoReflect.Descriptor instead.
func (*SecretStoreUpdateRequest) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{4}
}

func (x *SecretStoreUpdateRequest) GetMeta() *UpdateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecretStoreUpdateRequest) GetSecretStore() *SecretStore {
	if x != nil {
		return x.SecretStore
	}
	return nil
}

// SecretStoreUpdateResponse returns the fields of a SecretStore after it has been updated by
// a SecretStoreUpdateRequest.
type SecretStoreUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The updated SecretStore.
	SecretStore *SecretStore `protobuf:"bytes,2,opt,name=secret_store,json=secretStore,proto3" json:"secret_store,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *SecretStoreUpdateResponse) Reset() {
	*x = SecretStoreUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreUpdateResponse) ProtoMessage() {}

func (x *SecretStoreUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreUpdateResponse.ProtoReflect.Descriptor instead.
func (*SecretStoreUpdateResponse) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{5}
}

func (x *SecretStoreUpdateResponse) GetMeta() *UpdateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreUpdateResponse) GetSecretStore() *SecretStore {
	if x != nil {
		return x.SecretStore
	}
	return nil
}

func (x *SecretStoreUpdateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// SecretStoreDeleteRequest identifies a SecretStore by ID to delete.
type SecretStoreDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the SecretStore to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SecretStoreDeleteRequest) Reset() {
	*x = SecretStoreDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreDeleteRequest) ProtoMessage() {}

func (x *SecretStoreDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreDeleteRequest.ProtoReflect.Descriptor instead.
func (*SecretStoreDeleteRequest) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{6}
}

func (x *SecretStoreDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// SecretStoreDeleteResponse returns information about a SecretStore that was deleted.
type SecretStoreDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *SecretStoreDeleteResponse) Reset() {
	*x = SecretStoreDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreDeleteResponse) ProtoMessage() {}

func (x *SecretStoreDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreDeleteResponse.ProtoReflect.Descriptor instead.
func (*SecretStoreDeleteResponse) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{7}
}

func (x *SecretStoreDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// SecretStoreListRequest specifies criteria for retrieving a list of SecretStores.
type SecretStoreListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging parameters for the query.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SecretStoreListRequest) Reset() {
	*x = SecretStoreListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreListRequest) ProtoMessage() {}

func (x *SecretStoreListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreListRequest.ProtoReflect.Descriptor instead.
func (*SecretStoreListRequest) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{8}
}

func (x *SecretStoreListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// SecretStoreListResponse returns a list of SecretStores that meet the criteria of a
// SecretStoreListRequest.
type SecretStoreListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging information for the query.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A single page of results matching the list request criteria.
	SecretStores []*SecretStore `protobuf:"bytes,2,rep,name=secret_stores,json=secretStores,proto3" json:"secret_stores,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *SecretStoreListResponse) Reset() {
	*x = SecretStoreListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStoreListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStoreListResponse) ProtoMessage() {}

func (x *SecretStoreListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStoreListResponse.ProtoReflect.Descriptor instead.
func (*SecretStoreListResponse) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{9}
}

func (x *SecretStoreListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SecretStoreListResponse) GetSecretStores() []*SecretStore {
	if x != nil {
		return x.SecretStores
	}
	return nil
}

func (x *SecretStoreListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// A SecretStore is a server where resource secrets (passwords, keys) are stored.
// Coming soon support for HashiCorp Vault and AWS Secret Store. Contact support@strongdm.com to request access to the beta.
type SecretStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SecretStore:
	//	*SecretStore_VaultTls
	//	*SecretStore_VaultToken
	//	*SecretStore_Aws
	SecretStore isSecretStore_SecretStore `protobuf_oneof:"secret_store"`
}

func (x *SecretStore) Reset() {
	*x = SecretStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStore) ProtoMessage() {}

func (x *SecretStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStore.ProtoReflect.Descriptor instead.
func (*SecretStore) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{10}
}

func (m *SecretStore) GetSecretStore() isSecretStore_SecretStore {
	if m != nil {
		return m.SecretStore
	}
	return nil
}

func (x *SecretStore) GetVaultTls() *VaultTLSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTls); ok {
		return x.VaultTls
	}
	return nil
}

func (x *SecretStore) GetVaultToken() *VaultTokenStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultToken); ok {
		return x.VaultToken
	}
	return nil
}

func (x *SecretStore) GetAws() *AWSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Aws); ok {
		return x.Aws
	}
	return nil
}

type isSecretStore_SecretStore interface {
	isSecretStore_SecretStore()
}

type SecretStore_VaultTls struct {
	VaultTls *VaultTLSStore `protobuf:"bytes,1,opt,name=vault_tls,json=vaultTls,proto3,oneof"`
}

type SecretStore_VaultToken struct {
	VaultToken *VaultTokenStore `protobuf:"bytes,2,opt,name=vault_token,json=vaultToken,proto3,oneof"`
}

type SecretStore_Aws struct {
	Aws *AWSStore `protobuf:"bytes,3,opt,name=aws,proto3,oneof"`
}

func (*SecretStore_VaultTls) isSecretStore_SecretStore() {}

func (*SecretStore_VaultToken) isSecretStore_SecretStore() {}

func (*SecretStore_Aws) isSecretStore_SecretStore() {}

type VaultTokenStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTokenStore) Reset() {
	*x = VaultTokenStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTokenStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTokenStore) ProtoMessage() {}

func (x *VaultTokenStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTokenStore.ProtoReflect.Descriptor instead.
func (*VaultTokenStore) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{11}
}

func (x *VaultTokenStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTokenStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTokenStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTokenStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTLSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ServerAddress  string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	CACertPath     string `protobuf:"bytes,4,opt,name=CA_cert_path,json=CACertPath,proto3" json:"CA_cert_path,omitempty"`
	ClientCertPath string `protobuf:"bytes,5,opt,name=client_cert_path,json=clientCertPath,proto3" json:"client_cert_path,omitempty"`
	ClientKeyPath  string `protobuf:"bytes,6,opt,name=client_key_path,json=clientKeyPath,proto3" json:"client_key_path,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTLSStore) Reset() {
	*x = VaultTLSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTLSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTLSStore) ProtoMessage() {}

func (x *VaultTLSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTLSStore.ProtoReflect.Descriptor instead.
func (*VaultTLSStore) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{12}
}

func (x *VaultTLSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTLSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTLSStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTLSStore) GetCACertPath() string {
	if x != nil {
		return x.CACertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *VaultTLSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AWSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AWSStore) Reset() {
	*x = AWSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_stores_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSStore) ProtoMessage() {}

func (x *AWSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_stores_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSStore.ProtoReflect.Descriptor instead.
func (*AWSStore) Descriptor() ([]byte, []int) {
	return file_secret_stores_proto_rawDescGZIP(), []int{13}
}

func (x *AWSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSStore) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_secret_stores_proto protoreflect.FileDescriptor

var file_secret_stores_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x89, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xef, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x5f,
	0x0a, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xe9, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90,
	0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x18,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3,
	0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x65, 0x0a, 0x18, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xaf, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0x22, 0x69, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd5, 0x01,
	0x0a, 0x17, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0x90, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x12, 0xf2, 0xf8, 0xb3,
	0x07, 0x0d, 0x8a, 0xf4, 0xb3, 0x07, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x48,
	0x00, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x14, 0xf2, 0xf8, 0xb3, 0x07, 0x0f, 0x8a, 0xf4, 0xb3, 0x07,
	0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0xf2, 0xf8, 0xb3, 0x07, 0x08, 0x8a, 0xf4, 0xb3, 0x07, 0x03,
	0x61, 0x77, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x42, 0x41, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0xaa, 0xf8, 0xb3, 0x07, 0x10, 0xa2, 0xf8, 0xb3,
	0x07, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0xaa, 0xf8, 0xb3,
	0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x74, 0x61, 0x67, 0x73, 0xaa, 0xf8, 0xb3, 0x07, 0x09,
	0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xf8, 0xb3, 0x07, 0x1c,
	0xa2, 0xf3, 0xb3, 0x07, 0x02, 0x49, 0x44, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xf2, 0xf8, 0xb3, 0x07, 0x13, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xf8, 0xb3, 0x07, 0x21, 0xa2, 0xf3, 0xb3,
	0x07, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xa2, 0xf3, 0xb3, 0x07,
	0x04, 0x54, 0x61, 0x67, 0x73, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x3a, 0x47, 0xfa, 0xf8, 0xb3, 0x07, 0x42, 0xa2, 0xf3, 0xb3, 0x07, 0x0b, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xda, 0xf3, 0xb3, 0x07,
	0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xe2, 0xf3, 0xb3, 0x07, 0x0a,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xea, 0xf3, 0xb3, 0x07, 0x0a, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa9, 0x04, 0x0a, 0x0d, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2, 0xf8, 0xb3, 0x07, 0x1c, 0xa2, 0xf3,
	0xb3, 0x07, 0x02, 0x49, 0x44, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x0b, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xf2, 0xf8,
	0xb3, 0x07, 0x13, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xf8, 0xb3, 0x07, 0x21, 0xa2, 0xf3, 0xb3, 0x07, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x43,
	0x41, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xa2, 0xf3, 0xb3, 0x07, 0x0a, 0x43, 0x41, 0x43,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07,
	0x01, 0x8a, 0xf4, 0xb3, 0x07, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0a, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xf2, 0xf8, 0xb3, 0x07, 0x22, 0xa2, 0xf3, 0xb3,
	0x07, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x4e, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xf8, 0xb3, 0x07, 0x21, 0xa2,
	0xf3, 0xb3, 0x07, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74,
	0x68, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xa2, 0xf3,
	0xb3, 0x07, 0x04, 0x54, 0x61, 0x67, 0x73, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x3a, 0x41, 0xfa, 0xf8, 0xb3, 0x07, 0x3c, 0xa2, 0xf3, 0xb3, 0x07, 0x0b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xda, 0xf3,
	0xb3, 0x07, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xe2, 0xf3, 0xb3, 0x07, 0x08,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xea, 0xf3, 0xb3, 0x07, 0x08, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x4c, 0x53, 0x22, 0x8b, 0x02, 0x0a, 0x08, 0x41, 0x57, 0x53, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xf2, 0xf8, 0xb3, 0x07, 0x1c, 0xa2, 0xf3, 0xb3, 0x07, 0x02, 0x49, 0x44, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xf2, 0xf8, 0xb3, 0x07, 0x13, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xf8, 0xb3, 0x07, 0x1a, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xd0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x42, 0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xa2, 0xf3, 0xb3, 0x07, 0x04,
	0x54, 0x61, 0x67, 0x73, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a,
	0x32, 0xfa, 0xf8, 0xb3, 0x07, 0x2d, 0xa2, 0xf3, 0xb3, 0x07, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xda, 0xf3, 0xb3, 0x07, 0x03,
	0x61, 0x77, 0x73, 0xe2, 0xf3, 0xb3, 0x07, 0x03, 0x61, 0x77, 0x73, 0xea, 0xf3, 0xb3, 0x07, 0x03,
	0x61, 0x77, 0x73, 0x32, 0xde, 0x04, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xf9, 0xb3,
	0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x16,
	0xaa, 0xf3, 0xb3, 0x07, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03,
	0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xf9, 0xb3, 0x07,
	0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x70, 0x75, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3,
	0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xf9, 0xb3, 0x07, 0x0b, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x69, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67,
	0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x16, 0xaa, 0xf3, 0xb3, 0x07, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x15, 0xca,
	0xf9, 0xb3, 0x07, 0x10, 0xc2, 0xf9, 0xb3, 0x07, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x68, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f,
	0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x75, 0x6d,
	0x62, 0x69, 0x6e, 0x67, 0x42, 0x14, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f,
	0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_secret_stores_proto_rawDescOnce sync.Once
	file_secret_stores_proto_rawDescData = file_secret_stores_proto_rawDesc
)

func file_secret_stores_proto_rawDescGZIP() []byte {
	file_secret_stores_proto_rawDescOnce.Do(func() {
		file_secret_stores_proto_rawDescData = protoimpl.X.CompressGZIP(file_secret_stores_proto_rawDescData)
	})
	return file_secret_stores_proto_rawDescData
}

var file_secret_stores_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_secret_stores_proto_goTypes = []interface{}{
	(*SecretStoreCreateRequest)(nil),  // 0: v1.SecretStoreCreateRequest
	(*SecretStoreCreateResponse)(nil), // 1: v1.SecretStoreCreateResponse
	(*SecretStoreGetRequest)(nil),     // 2: v1.SecretStoreGetRequest
	(*SecretStoreGetResponse)(nil),    // 3: v1.SecretStoreGetResponse
	(*SecretStoreUpdateRequest)(nil),  // 4: v1.SecretStoreUpdateRequest
	(*SecretStoreUpdateResponse)(nil), // 5: v1.SecretStoreUpdateResponse
	(*SecretStoreDeleteRequest)(nil),  // 6: v1.SecretStoreDeleteRequest
	(*SecretStoreDeleteResponse)(nil), // 7: v1.SecretStoreDeleteResponse
	(*SecretStoreListRequest)(nil),    // 8: v1.SecretStoreListRequest
	(*SecretStoreListResponse)(nil),   // 9: v1.SecretStoreListResponse
	(*SecretStore)(nil),               // 10: v1.SecretStore
	(*VaultTokenStore)(nil),           // 11: v1.VaultTokenStore
	(*VaultTLSStore)(nil),             // 12: v1.VaultTLSStore
	(*AWSStore)(nil),                  // 13: v1.AWSStore
	(*CreateRequestMetadata)(nil),     // 14: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),    // 15: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),         // 16: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),        // 17: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),       // 18: v1.GetResponseMetadata
	(*UpdateRequestMetadata)(nil),     // 19: v1.UpdateRequestMetadata
	(*UpdateResponseMetadata)(nil),    // 20: v1.UpdateResponseMetadata
	(*DeleteRequestMetadata)(nil),     // 21: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),    // 22: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),       // 23: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),      // 24: v1.ListResponseMetadata
	(*Tags)(nil),                      // 25: v1.Tags
}
var file_secret_stores_proto_depIdxs = []int32{
	14, // 0: v1.SecretStoreCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	10, // 1: v1.SecretStoreCreateRequest.secret_store:type_name -> v1.SecretStore
	15, // 2: v1.SecretStoreCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	10, // 3: v1.SecretStoreCreateResponse.secret_store:type_name -> v1.SecretStore
	16, // 4: v1.SecretStoreCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	17, // 5: v1.SecretStoreGetRequest.meta:type_name -> v1.GetRequestMetadata
	18, // 6: v1.SecretStoreGetResponse.meta:type_name -> v1.GetResponseMetadata
	10, // 7: v1.SecretStoreGetResponse.secret_store:type_name -> v1.SecretStore
	16, // 8: v1.SecretStoreGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	19, // 9: v1.SecretStoreUpdateRequest.meta:type_name -> v1.UpdateRequestMetadata
	10, // 10: v1.SecretStoreUpdateRequest.secret_store:type_name -> v1.SecretStore
	20, // 11: v1.SecretStoreUpdateResponse.meta:type_name -> v1.UpdateResponseMetadata
	10, // 12: v1.SecretStoreUpdateResponse.secret_store:type_name -> v1.SecretStore
	16, // 13: v1.SecretStoreUpdateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	21, // 14: v1.SecretStoreDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	22, // 15: v1.SecretStoreDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	16, // 16: v1.SecretStoreDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	23, // 17: v1.SecretStoreListRequest.meta:type_name -> v1.ListRequestMetadata
	24, // 18: v1.SecretStoreListResponse.meta:type_name -> v1.ListResponseMetadata
	10, // 19: v1.SecretStoreListResponse.secret_stores:type_name -> v1.SecretStore
	16, // 20: v1.SecretStoreListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 21: v1.SecretStore.vault_tls:type_name -> v1.VaultTLSStore
	11, // 22: v1.SecretStore.vault_token:type_name -> v1.VaultTokenStore
	13, // 23: v1.SecretStore.aws:type_name -> v1.AWSStore
	25, // 24: v1.VaultTokenStore.tags:type_name -> v1.Tags
	25, // 25: v1.VaultTLSStore.tags:type_name -> v1.Tags
	25, // 26: v1.AWSStore.tags:type_name -> v1.Tags
	0,  // 27: v1.SecretStores.Create:input_type -> v1.SecretStoreCreateRequest
	2,  // 28: v1.SecretStores.Get:input_type -> v1.SecretStoreGetRequest
	4,  // 29: v1.SecretStores.Update:input_type -> v1.SecretStoreUpdateRequest
	6,  // 30: v1.SecretStores.Delete:input_type -> v1.SecretStoreDeleteRequest
	8,  // 31: v1.SecretStores.List:input_type -> v1.SecretStoreListRequest
	1,  // 32: v1.SecretStores.Create:output_type -> v1.SecretStoreCreateResponse
	3,  // 33: v1.SecretStores.Get:output_type -> v1.SecretStoreGetResponse
	5,  // 34: v1.SecretStores.Update:output_type -> v1.SecretStoreUpdateResponse
	7,  // 35: v1.SecretStores.Delete:output_type -> v1.SecretStoreDeleteResponse
	9,  // 36: v1.SecretStores.List:output_type -> v1.SecretStoreListResponse
	32, // [32:37] is the sub-list for method output_type
	27, // [27:32] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_secret_stores_proto_init() }
func file_secret_stores_proto_init() {
	if File_secret_stores_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	file_tags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_secret_stores_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStoreListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTokenStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTLSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_stores_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secret_stores_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SecretStore_VaultTls)(nil),
		(*SecretStore_VaultToken)(nil),
		(*SecretStore_Aws)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secret_stores_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_secret_stores_proto_goTypes,
		DependencyIndexes: file_secret_stores_proto_depIdxs,
		MessageInfos:      file_secret_stores_proto_msgTypes,
	}.Build()
	File_secret_stores_proto = out.File
	file_secret_stores_proto_rawDesc = nil
	file_secret_stores_proto_goTypes = nil
	file_secret_stores_proto_depIdxs = nil
}
