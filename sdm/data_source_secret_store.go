// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"

	sdm "github.com/strongdm/strongdm-sdk-go"
)

func dataSourceSecretStore() *schema.Resource {
	return &schema.Resource{
		Read: wrapCrudOperation(dataSourceSecretStoreList),
		Schema: map[string]*schema.Schema{
			"ids": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {\n     example: { value: '{ \"id\": \"r-7\", \"name\": \"happy-goat\"}' }\n };\n Unique identifier of the SecretStore.",
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique human-readable name of the SecretStore.",
			},
			"server_address": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "",
			},
			"kind": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "",
			},
			"tags": {
				Type: schema.TypeMap,

				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Optional:    true,
				Description: "Tags is a map of key, value pairs.",
			},
			"secret_stores": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {\n     example: { value: '{ \"id\": \"r-7\", \"name\": \"happy-goat\"}' }\n };\n Unique identifier of the SecretStore.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique human-readable name of the SecretStore.",
						},
						"server_address": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "",
						},
						"kind": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "",
						},
						"tags": {
							Type: schema.TypeMap,

							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func convertSecretStoreFilterFromResourceData(d *schema.ResourceData) (string, []interface{}) {
	filter := ""
	args := []interface{}{}
	if v, ok := d.GetOk("id"); ok {
		filter += "id:? "
		args = append(args, v)
	}
	if v, ok := d.GetOk("name"); ok {
		filter += "name:? "
		args = append(args, v)
	}
	if v, ok := d.GetOk("server_address"); ok {
		filter += "serveraddress:? "
		args = append(args, v)
	}
	if v, ok := d.GetOk("kind"); ok {
		filter += "kind:? "
		args = append(args, v)
	}
	if v, ok := d.GetOk("tags"); ok {
		filter += "tags:? "
		args = append(args, v)
	}
	return filter, args
}

func dataSourceSecretStoreList(d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(context.Background(), d.Timeout(schema.TimeoutRead))
	defer cancel()
	filter, args := convertSecretStoreFilterFromResourceData(d)
	resp, err := cc.SecretStores().List(ctx, filter, args...)
	if err != nil {
		return fmt.Errorf("cannot list SecretStores %s: %w", d.Id(), err)
	}
	ids := []string{}
	type entity = map[string]interface{}
	output := make([]entity, 0)
	for resp.Next() {
		v := resp.Value()
		ids = append(ids, v.ID)
		output = append(output,
			entity{
				"id":             (v.ID),
				"name":           (v.Name),
				"server_address": (v.ServerAddress),
				"kind":           (v.Kind),
				"tags":           convertTagsToMap(v.Tags),
			})
	}
	if resp.Err() != nil {
		return fmt.Errorf("failure during list: %w", resp.Err())
	}

	err = d.Set("ids", ids)
	if err != nil {
		return fmt.Errorf("cannot set ids: %w", err)
	}
	err = d.Set("secret_stores", output)
	if err != nil {
		return fmt.Errorf("cannot set output: %w", err)
	}
	d.SetId("SecretStore" + filter + fmt.Sprint(args...))
	return nil
}
