// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"

	sdm "github.com/strongdm/strongdm-sdk-go"
)

func resourceSecretStore() *schema.Resource {
	return &schema.Resource{
		Create: wrapCrudOperation(resourceSecretStoreCreate),
		Read:   wrapCrudOperation(resourceSecretStoreRead),
		Update: wrapCrudOperation(resourceSecretStoreUpdate),
		Delete: wrapCrudOperation(resourceSecretStoreDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the SecretStore.",
			},
			"server_address": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "",
			},
			"kind": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "",
			},
			"tags": {
				Type: schema.TypeMap,

				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Optional:    true,
				Description: "Tags is a map of key, value pairs.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertSecretStoreFromResourceData(d *schema.ResourceData) *sdm.SecretStore {
	return &sdm.SecretStore{
		ID:            d.Id(),
		Name:          convertStringFromResourceData(d, "name"),
		ServerAddress: convertStringFromResourceData(d, "server_address"),
		Kind:          convertStringFromResourceData(d, "kind"),
		Tags:          convertTagsFromResourceData(d, "tags"),
	}
}

func resourceSecretStoreCreate(d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(context.Background(), d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertSecretStoreFromResourceData(d)
	resp, err := cc.SecretStores().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create SecretStore %s: %w", "", err)
	}
	d.SetId(resp.SecretStore.ID)
	v := resp.SecretStore
	d.Set("name", (v.Name))
	d.Set("server_address", (v.ServerAddress))
	d.Set("kind", (v.Kind))
	d.Set("tags", convertTagsToMap(v.Tags))
	return nil
}

func resourceSecretStoreRead(d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(context.Background(), d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertSecretStoreFromResourceData(d)
	_ = localVersion
	resp, err := cc.SecretStores().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read SecretStore %s: %w", d.Id(), err)
	}
	v := resp.SecretStore
	d.Set("name", (v.Name))
	d.Set("server_address", (v.ServerAddress))
	d.Set("kind", (v.Kind))
	d.Set("tags", convertTagsToMap(v.Tags))
	return nil
}
func resourceSecretStoreUpdate(d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(context.Background(), d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.SecretStores().Update(ctx, convertSecretStoreFromResourceData(d))
	if err != nil {
		return fmt.Errorf("cannot update SecretStore %s: %w", d.Id(), err)
	}
	d.SetId(resp.SecretStore.ID)
	return resourceSecretStoreRead(d, cc)
}
func resourceSecretStoreDelete(d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(context.Background(), d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.SecretStores().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
